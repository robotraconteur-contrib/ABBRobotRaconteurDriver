// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: egm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Abb.Egm {

  /// <summary>Holder for reflection information generated from egm.proto</summary>
  public static partial class EgmReflection {

    #region Descriptor
    /// <summary>File descriptor for egm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EgmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgllZ20ucHJvdG8SB2FiYi5lZ20i6wEKCUVnbUhlYWRlchINCgVzZXFubxgB",
            "IAEoDRIKCgJ0bRgCIAEoDRJACgVtdHlwZRgDIAEoDjIeLmFiYi5lZ20uRWdt",
            "SGVhZGVyLk1lc3NhZ2VUeXBlOhFNU0dUWVBFX1VOREVGSU5FRCKAAQoLTWVz",
            "c2FnZVR5cGUSFQoRTVNHVFlQRV9VTkRFRklORUQQABITCg9NU0dUWVBFX0NP",
            "TU1BTkQQARIQCgxNU0dUWVBFX0RBVEEQAhIWChJNU0dUWVBFX0NPUlJFQ1RJ",
            "T04QAxIbChdNU0dUWVBFX1BBVEhfQ09SUkVDVElPThAEIi8KDEVnbUNhcnRl",
            "c2lhbhIJCgF4GAEgAigBEgkKAXkYAiACKAESCQoBehgDIAIoASI/Cg1FZ21R",
            "dWF0ZXJuaW9uEgoKAnUwGAEgAigBEgoKAnUxGAIgAigBEgoKAnUyGAMgAigB",
            "EgoKAnUzGAQgAigBIisKCEVnbUV1bGVyEgkKAXgYASACKAESCQoBeRgCIAIo",
            "ARIJCgF6GAMgAigBIncKB0VnbVBvc2USIgoDcG9zGAEgASgLMhUuYWJiLmVn",
            "bS5FZ21DYXJ0ZXNpYW4SJgoGb3JpZW50GAIgASgLMhYuYWJiLmVnbS5FZ21R",
            "dWF0ZXJuaW9uEiAKBWV1bGVyGAMgASgLMhEuYWJiLmVnbS5FZ21FdWxlciIi",
            "ChFFZ21DYXJ0ZXNpYW5TcGVlZBINCgV2YWx1ZRgBIAMoASIbCglFZ21Kb2lu",
            "dHMSDgoGam9pbnRzGAEgAygBIiMKEUVnbUV4dGVybmFsSm9pbnRzEg4KBmpv",
            "aW50cxgBIAMoASKBAQoKRWdtUGxhbm5lZBIiCgZqb2ludHMYASABKAsyEi5h",
            "YmIuZWdtLkVnbUpvaW50cxIjCgljYXJ0ZXNpYW4YAiABKAsyEC5hYmIuZWdt",
            "LkVnbVBvc2USKgoOZXh0ZXJuYWxKb2ludHMYAyABKAsyEi5hYmIuZWdtLkVn",
            "bUpvaW50cyKNAQoLRWdtU3BlZWRSZWYSIgoGam9pbnRzGAEgASgLMhIuYWJi",
            "LmVnbS5FZ21Kb2ludHMSLgoKY2FydGVzaWFucxgCIAEoCzIaLmFiYi5lZ20u",
            "RWdtQ2FydGVzaWFuU3BlZWQSKgoOZXh0ZXJuYWxKb2ludHMYAyABKAsyEi5h",
            "YmIuZWdtLkVnbUpvaW50cyI+CgtFZ21QYXRoQ29ychIiCgNwb3MYASACKAsy",
            "FS5hYmIuZWdtLkVnbUNhcnRlc2lhbhILCgNhZ2UYAiACKA0iggEKC0VnbUZl",
            "ZWRCYWNrEiIKBmpvaW50cxgBIAEoCzISLmFiYi5lZ20uRWdtSm9pbnRzEiMK",
            "CWNhcnRlc2lhbhgCIAEoCzIQLmFiYi5lZ20uRWdtUG9zZRIqCg5leHRlcm5h",
            "bEpvaW50cxgDIAEoCzISLmFiYi5lZ20uRWdtSm9pbnRzIowBCg1FZ21Nb3Rv",
            "clN0YXRlEjQKBXN0YXRlGAEgAigOMiUuYWJiLmVnbS5FZ21Nb3RvclN0YXRl",
            "Lk1vdG9yU3RhdGVUeXBlIkUKDk1vdG9yU3RhdGVUeXBlEhQKEE1PVE9SU19V",
            "TkRFRklORUQQABINCglNT1RPUlNfT04QARIOCgpNT1RPUlNfT0ZGEAIiogEK",
            "C0VnbU1DSVN0YXRlEj8KBXN0YXRlGAEgAigOMiEuYWJiLmVnbS5FZ21NQ0lT",
            "dGF0ZS5NQ0lTdGF0ZVR5cGU6DU1DSV9VTkRFRklORUQiUgoMTUNJU3RhdGVU",
            "eXBlEhEKDU1DSV9VTkRFRklORUQQABINCglNQ0lfRVJST1IQARIPCgtNQ0lf",
            "U1RPUFBFRBACEg8KC01DSV9SVU5OSU5HEAMiwwEKFUVnbVJhcGlkQ3RybEV4",
            "ZWNTdGF0ZRJVCgVzdGF0ZRgBIAIoDjI1LmFiYi5lZ20uRWdtUmFwaWRDdHJs",
            "RXhlY1N0YXRlLlJhcGlkQ3RybEV4ZWNTdGF0ZVR5cGU6D1JBUElEX1VOREVG",
            "SU5FRCJTChZSYXBpZEN0cmxFeGVjU3RhdGVUeXBlEhMKD1JBUElEX1VOREVG",
            "SU5FRBAAEhEKDVJBUElEX1NUT1BQRUQQARIRCg1SQVBJRF9SVU5OSU5HEAIi",
            "IQoORWdtVGVzdFNpZ25hbHMSDwoHc2lnbmFscxgBIAMoASLRAgoIRWdtUm9i",
            "b3QSIgoGaGVhZGVyGAEgASgLMhIuYWJiLmVnbS5FZ21IZWFkZXISJgoIZmVl",
            "ZEJhY2sYAiABKAsyFC5hYmIuZWdtLkVnbUZlZWRCYWNrEiQKB3BsYW5uZWQY",
            "AyABKAsyEy5hYmIuZWdtLkVnbVBsYW5uZWQSKgoKbW90b3JTdGF0ZRgEIAEo",
            "CzIWLmFiYi5lZ20uRWdtTW90b3JTdGF0ZRImCghtY2lTdGF0ZRgFIAEoCzIU",
            "LmFiYi5lZ20uRWdtTUNJU3RhdGUSGQoRbWNpQ29udmVyZ2VuY2VNZXQYBiAB",
            "KAgSLAoLdGVzdFNpZ25hbHMYByABKAsyFy5hYmIuZWdtLkVnbVRlc3RTaWdu",
            "YWxzEjYKDnJhcGlkRXhlY1N0YXRlGAggASgLMh4uYWJiLmVnbS5FZ21SYXBp",
            "ZEN0cmxFeGVjU3RhdGUifQoJRWdtU2Vuc29yEiIKBmhlYWRlchgBIAEoCzIS",
            "LmFiYi5lZ20uRWdtSGVhZGVyEiQKB3BsYW5uZWQYAiABKAsyEy5hYmIuZWdt",
            "LkVnbVBsYW5uZWQSJgoIc3BlZWRSZWYYAyABKAsyFC5hYmIuZWdtLkVnbVNw",
            "ZWVkUmVmIl8KEUVnbVNlbnNvclBhdGhDb3JyEiIKBmhlYWRlchgBIAEoCzIS",
            "LmFiYi5lZ20uRWdtSGVhZGVyEiYKCHBhdGhDb3JyGAIgASgLMhQuYWJiLmVn",
            "bS5FZ21QYXRoQ29ycg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmHeader), global::Abb.Egm.EgmHeader.Parser, new[]{ "Seqno", "Tm", "Mtype" }, null, new[]{ typeof(global::Abb.Egm.EgmHeader.Types.MessageType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmCartesian), global::Abb.Egm.EgmCartesian.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmQuaternion), global::Abb.Egm.EgmQuaternion.Parser, new[]{ "U0", "U1", "U2", "U3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmEuler), global::Abb.Egm.EgmEuler.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmPose), global::Abb.Egm.EgmPose.Parser, new[]{ "Pos", "Orient", "Euler" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmCartesianSpeed), global::Abb.Egm.EgmCartesianSpeed.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmJoints), global::Abb.Egm.EgmJoints.Parser, new[]{ "Joints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmExternalJoints), global::Abb.Egm.EgmExternalJoints.Parser, new[]{ "Joints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmPlanned), global::Abb.Egm.EgmPlanned.Parser, new[]{ "Joints", "Cartesian", "ExternalJoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmSpeedRef), global::Abb.Egm.EgmSpeedRef.Parser, new[]{ "Joints", "Cartesians", "ExternalJoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmPathCorr), global::Abb.Egm.EgmPathCorr.Parser, new[]{ "Pos", "Age" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmFeedBack), global::Abb.Egm.EgmFeedBack.Parser, new[]{ "Joints", "Cartesian", "ExternalJoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmMotorState), global::Abb.Egm.EgmMotorState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Abb.Egm.EgmMotorState.Types.MotorStateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmMCIState), global::Abb.Egm.EgmMCIState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Abb.Egm.EgmMCIState.Types.MCIStateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmRapidCtrlExecState), global::Abb.Egm.EgmRapidCtrlExecState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmTestSignals), global::Abb.Egm.EgmTestSignals.Parser, new[]{ "Signals" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmRobot), global::Abb.Egm.EgmRobot.Parser, new[]{ "Header", "FeedBack", "Planned", "MotorState", "MciState", "MciConvergenceMet", "TestSignals", "RapidExecState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmSensor), global::Abb.Egm.EgmSensor.Parser, new[]{ "Header", "Planned", "SpeedRef" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Abb.Egm.EgmSensorPathCorr), global::Abb.Egm.EgmSensorPathCorr.Parser, new[]{ "Header", "PathCorr" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EgmHeader : pb::IMessage<EgmHeader> {
    private static readonly pb::MessageParser<EgmHeader> _parser = new pb::MessageParser<EgmHeader>(() => new EgmHeader());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmHeader(EgmHeader other) : this() {
      _hasBits0 = other._hasBits0;
      seqno_ = other.seqno_;
      tm_ = other.tm_;
      mtype_ = other.mtype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmHeader Clone() {
      return new EgmHeader(this);
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 1;
    private readonly static uint SeqnoDefaultValue = 0;

    private uint seqno_;
    /// <summary>
    /// sequence number (to be able to find lost messages)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seqno {
      get { if ((_hasBits0 & 1) != 0) { return seqno_; } else { return SeqnoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seqno_ = value;
      }
    }
    /// <summary>Gets whether the "seqno" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeqno {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seqno" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeqno() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tm" field.</summary>
    public const int TmFieldNumber = 2;
    private readonly static uint TmDefaultValue = 0;

    private uint tm_;
    /// <summary>
    /// time stamp in ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tm {
      get { if ((_hasBits0 & 2) != 0) { return tm_; } else { return TmDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tm_ = value;
      }
    }
    /// <summary>Gets whether the "tm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTm {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTm() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mtype" field.</summary>
    public const int MtypeFieldNumber = 3;
    private readonly static global::Abb.Egm.EgmHeader.Types.MessageType MtypeDefaultValue = global::Abb.Egm.EgmHeader.Types.MessageType.MsgtypeUndefined;

    private global::Abb.Egm.EgmHeader.Types.MessageType mtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmHeader.Types.MessageType Mtype {
      get { if ((_hasBits0 & 4) != 0) { return mtype_; } else { return MtypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mtype_ = value;
      }
    }
    /// <summary>Gets whether the "mtype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMtype {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mtype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMtype() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqno != other.Seqno) return false;
      if (Tm != other.Tm) return false;
      if (Mtype != other.Mtype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeqno) hash ^= Seqno.GetHashCode();
      if (HasTm) hash ^= Tm.GetHashCode();
      if (HasMtype) hash ^= Mtype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSeqno) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seqno);
      }
      if (HasTm) {
        output.WriteRawTag(16);
        output.WriteUInt32(Tm);
      }
      if (HasMtype) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Mtype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSeqno) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seqno);
      }
      if (HasTm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tm);
      }
      if (HasMtype) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mtype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmHeader other) {
      if (other == null) {
        return;
      }
      if (other.HasSeqno) {
        Seqno = other.Seqno;
      }
      if (other.HasTm) {
        Tm = other.Tm;
      }
      if (other.HasMtype) {
        Mtype = other.Mtype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqno = input.ReadUInt32();
            break;
          }
          case 16: {
            Tm = input.ReadUInt32();
            break;
          }
          case 24: {
            Mtype = (global::Abb.Egm.EgmHeader.Types.MessageType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EgmHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MessageType {
        [pbr::OriginalName("MSGTYPE_UNDEFINED")] MsgtypeUndefined = 0,
        /// <summary>
        /// for future use
        /// </summary>
        [pbr::OriginalName("MSGTYPE_COMMAND")] MsgtypeCommand = 1,
        /// <summary>
        /// sent by robot controller
        /// </summary>
        [pbr::OriginalName("MSGTYPE_DATA")] MsgtypeData = 2,
        /// <summary>
        /// sent by sensor
        /// </summary>
        [pbr::OriginalName("MSGTYPE_CORRECTION")] MsgtypeCorrection = 3,
        /// <summary>
        /// sent by sensor
        /// </summary>
        [pbr::OriginalName("MSGTYPE_PATH_CORRECTION")] MsgtypePathCorrection = 4,
      }

    }
    #endregion

  }

  public sealed partial class EgmCartesian : pb::IMessage<EgmCartesian> {
    private static readonly pb::MessageParser<EgmCartesian> _parser = new pb::MessageParser<EgmCartesian>(() => new EgmCartesian());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmCartesian> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesian() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesian(EgmCartesian other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesian Clone() {
      return new EgmCartesian(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static double ZDefaultValue = 0D;

    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmCartesian);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmCartesian other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasZ) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (HasZ) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmCartesian other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmQuaternion : pb::IMessage<EgmQuaternion> {
    private static readonly pb::MessageParser<EgmQuaternion> _parser = new pb::MessageParser<EgmQuaternion>(() => new EgmQuaternion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmQuaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmQuaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmQuaternion(EgmQuaternion other) : this() {
      _hasBits0 = other._hasBits0;
      u0_ = other.u0_;
      u1_ = other.u1_;
      u2_ = other.u2_;
      u3_ = other.u3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmQuaternion Clone() {
      return new EgmQuaternion(this);
    }

    /// <summary>Field number for the "u0" field.</summary>
    public const int U0FieldNumber = 1;
    private readonly static double U0DefaultValue = 0D;

    private double u0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double U0 {
      get { if ((_hasBits0 & 1) != 0) { return u0_; } else { return U0DefaultValue; } }
      set {
        _hasBits0 |= 1;
        u0_ = value;
      }
    }
    /// <summary>Gets whether the "u0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasU0 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "u0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearU0() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "u1" field.</summary>
    public const int U1FieldNumber = 2;
    private readonly static double U1DefaultValue = 0D;

    private double u1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double U1 {
      get { if ((_hasBits0 & 2) != 0) { return u1_; } else { return U1DefaultValue; } }
      set {
        _hasBits0 |= 2;
        u1_ = value;
      }
    }
    /// <summary>Gets whether the "u1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasU1 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "u1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearU1() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "u2" field.</summary>
    public const int U2FieldNumber = 3;
    private readonly static double U2DefaultValue = 0D;

    private double u2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double U2 {
      get { if ((_hasBits0 & 4) != 0) { return u2_; } else { return U2DefaultValue; } }
      set {
        _hasBits0 |= 4;
        u2_ = value;
      }
    }
    /// <summary>Gets whether the "u2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasU2 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "u2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearU2() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "u3" field.</summary>
    public const int U3FieldNumber = 4;
    private readonly static double U3DefaultValue = 0D;

    private double u3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double U3 {
      get { if ((_hasBits0 & 8) != 0) { return u3_; } else { return U3DefaultValue; } }
      set {
        _hasBits0 |= 8;
        u3_ = value;
      }
    }
    /// <summary>Gets whether the "u3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasU3 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "u3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearU3() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmQuaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmQuaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(U0, other.U0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(U1, other.U1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(U2, other.U2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(U3, other.U3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasU0) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(U0);
      if (HasU1) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(U1);
      if (HasU2) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(U2);
      if (HasU3) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(U3);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasU0) {
        output.WriteRawTag(9);
        output.WriteDouble(U0);
      }
      if (HasU1) {
        output.WriteRawTag(17);
        output.WriteDouble(U1);
      }
      if (HasU2) {
        output.WriteRawTag(25);
        output.WriteDouble(U2);
      }
      if (HasU3) {
        output.WriteRawTag(33);
        output.WriteDouble(U3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasU0) {
        size += 1 + 8;
      }
      if (HasU1) {
        size += 1 + 8;
      }
      if (HasU2) {
        size += 1 + 8;
      }
      if (HasU3) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmQuaternion other) {
      if (other == null) {
        return;
      }
      if (other.HasU0) {
        U0 = other.U0;
      }
      if (other.HasU1) {
        U1 = other.U1;
      }
      if (other.HasU2) {
        U2 = other.U2;
      }
      if (other.HasU3) {
        U3 = other.U3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            U0 = input.ReadDouble();
            break;
          }
          case 17: {
            U1 = input.ReadDouble();
            break;
          }
          case 25: {
            U2 = input.ReadDouble();
            break;
          }
          case 33: {
            U3 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmEuler : pb::IMessage<EgmEuler> {
    private static readonly pb::MessageParser<EgmEuler> _parser = new pb::MessageParser<EgmEuler>(() => new EgmEuler());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmEuler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmEuler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmEuler(EgmEuler other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmEuler Clone() {
      return new EgmEuler(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static double ZDefaultValue = 0D;

    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmEuler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmEuler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasZ) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (HasZ) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmEuler other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmPose : pb::IMessage<EgmPose> {
    private static readonly pb::MessageParser<EgmPose> _parser = new pb::MessageParser<EgmPose>(() => new EgmPose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPose(EgmPose other) : this() {
      pos_ = other.HasPos ? other.pos_.Clone() : null;
      orient_ = other.HasOrient ? other.orient_.Clone() : null;
      euler_ = other.HasEuler ? other.euler_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPose Clone() {
      return new EgmPose(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Abb.Egm.EgmCartesian pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmCartesian Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }
    /// <summary>Gets whether the pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPos {
      get { return pos_ != null; }
    }
    /// <summary>Clears the value of the pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPos() {
      pos_ = null;
    }

    /// <summary>Field number for the "orient" field.</summary>
    public const int OrientFieldNumber = 2;
    private global::Abb.Egm.EgmQuaternion orient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmQuaternion Orient {
      get { return orient_; }
      set {
        orient_ = value;
      }
    }
    /// <summary>Gets whether the orient field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrient {
      get { return orient_ != null; }
    }
    /// <summary>Clears the value of the orient field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrient() {
      orient_ = null;
    }

    /// <summary>Field number for the "euler" field.</summary>
    public const int EulerFieldNumber = 3;
    private global::Abb.Egm.EgmEuler euler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmEuler Euler {
      get { return euler_; }
      set {
        euler_ = value;
      }
    }
    /// <summary>Gets whether the euler field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEuler {
      get { return euler_ != null; }
    }
    /// <summary>Clears the value of the euler field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEuler() {
      euler_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Orient, other.Orient)) return false;
      if (!object.Equals(Euler, other.Euler)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasOrient) hash ^= Orient.GetHashCode();
      if (HasEuler) hash ^= Euler.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPos) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (HasOrient) {
        output.WriteRawTag(18);
        output.WriteMessage(Orient);
      }
      if (HasEuler) {
        output.WriteRawTag(26);
        output.WriteMessage(Euler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (HasOrient) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orient);
      }
      if (HasEuler) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Euler);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmPose other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        if (!HasPos) {
          Pos = new global::Abb.Egm.EgmCartesian();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.HasOrient) {
        if (!HasOrient) {
          Orient = new global::Abb.Egm.EgmQuaternion();
        }
        Orient.MergeFrom(other.Orient);
      }
      if (other.HasEuler) {
        if (!HasEuler) {
          Euler = new global::Abb.Egm.EgmEuler();
        }
        Euler.MergeFrom(other.Euler);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasPos) {
              Pos = new global::Abb.Egm.EgmCartesian();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (!HasOrient) {
              Orient = new global::Abb.Egm.EgmQuaternion();
            }
            input.ReadMessage(Orient);
            break;
          }
          case 26: {
            if (!HasEuler) {
              Euler = new global::Abb.Egm.EgmEuler();
            }
            input.ReadMessage(Euler);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmCartesianSpeed : pb::IMessage<EgmCartesianSpeed> {
    private static readonly pb::MessageParser<EgmCartesianSpeed> _parser = new pb::MessageParser<EgmCartesianSpeed>(() => new EgmCartesianSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmCartesianSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesianSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesianSpeed(EgmCartesianSpeed other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmCartesianSpeed Clone() {
      return new EgmCartesianSpeed(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_value_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> value_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmCartesianSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmCartesianSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmCartesianSpeed other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmJoints : pb::IMessage<EgmJoints> {
    private static readonly pb::MessageParser<EgmJoints> _parser = new pb::MessageParser<EgmJoints>(() => new EgmJoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmJoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmJoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmJoints(EgmJoints other) : this() {
      joints_ = other.joints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmJoints Clone() {
      return new EgmJoints(this);
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_joints_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> joints_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Joints {
      get { return joints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmJoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmJoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!joints_.Equals(other.joints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= joints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      joints_.WriteTo(output, _repeated_joints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmJoints other) {
      if (other == null) {
        return;
      }
      joints_.Add(other.joints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmExternalJoints : pb::IMessage<EgmExternalJoints> {
    private static readonly pb::MessageParser<EgmExternalJoints> _parser = new pb::MessageParser<EgmExternalJoints>(() => new EgmExternalJoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmExternalJoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmExternalJoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmExternalJoints(EgmExternalJoints other) : this() {
      joints_ = other.joints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmExternalJoints Clone() {
      return new EgmExternalJoints(this);
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_joints_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> joints_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Joints {
      get { return joints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmExternalJoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmExternalJoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!joints_.Equals(other.joints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= joints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      joints_.WriteTo(output, _repeated_joints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmExternalJoints other) {
      if (other == null) {
        return;
      }
      joints_.Add(other.joints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmPlanned : pb::IMessage<EgmPlanned> {
    private static readonly pb::MessageParser<EgmPlanned> _parser = new pb::MessageParser<EgmPlanned>(() => new EgmPlanned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmPlanned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPlanned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPlanned(EgmPlanned other) : this() {
      joints_ = other.HasJoints ? other.joints_.Clone() : null;
      cartesian_ = other.HasCartesian ? other.cartesian_.Clone() : null;
      externalJoints_ = other.HasExternalJoints ? other.externalJoints_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPlanned Clone() {
      return new EgmPlanned(this);
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 1;
    private global::Abb.Egm.EgmJoints joints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints Joints {
      get { return joints_; }
      set {
        joints_ = value;
      }
    }
    /// <summary>Gets whether the joints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoints {
      get { return joints_ != null; }
    }
    /// <summary>Clears the value of the joints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoints() {
      joints_ = null;
    }

    /// <summary>Field number for the "cartesian" field.</summary>
    public const int CartesianFieldNumber = 2;
    private global::Abb.Egm.EgmPose cartesian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmPose Cartesian {
      get { return cartesian_; }
      set {
        cartesian_ = value;
      }
    }
    /// <summary>Gets whether the cartesian field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCartesian {
      get { return cartesian_ != null; }
    }
    /// <summary>Clears the value of the cartesian field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCartesian() {
      cartesian_ = null;
    }

    /// <summary>Field number for the "externalJoints" field.</summary>
    public const int ExternalJointsFieldNumber = 3;
    private global::Abb.Egm.EgmJoints externalJoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints ExternalJoints {
      get { return externalJoints_; }
      set {
        externalJoints_ = value;
      }
    }
    /// <summary>Gets whether the externalJoints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExternalJoints {
      get { return externalJoints_ != null; }
    }
    /// <summary>Clears the value of the externalJoints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExternalJoints() {
      externalJoints_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmPlanned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmPlanned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Joints, other.Joints)) return false;
      if (!object.Equals(Cartesian, other.Cartesian)) return false;
      if (!object.Equals(ExternalJoints, other.ExternalJoints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJoints) hash ^= Joints.GetHashCode();
      if (HasCartesian) hash ^= Cartesian.GetHashCode();
      if (HasExternalJoints) hash ^= ExternalJoints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasJoints) {
        output.WriteRawTag(10);
        output.WriteMessage(Joints);
      }
      if (HasCartesian) {
        output.WriteRawTag(18);
        output.WriteMessage(Cartesian);
      }
      if (HasExternalJoints) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalJoints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joints);
      }
      if (HasCartesian) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cartesian);
      }
      if (HasExternalJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalJoints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmPlanned other) {
      if (other == null) {
        return;
      }
      if (other.HasJoints) {
        if (!HasJoints) {
          Joints = new global::Abb.Egm.EgmJoints();
        }
        Joints.MergeFrom(other.Joints);
      }
      if (other.HasCartesian) {
        if (!HasCartesian) {
          Cartesian = new global::Abb.Egm.EgmPose();
        }
        Cartesian.MergeFrom(other.Cartesian);
      }
      if (other.HasExternalJoints) {
        if (!HasExternalJoints) {
          ExternalJoints = new global::Abb.Egm.EgmJoints();
        }
        ExternalJoints.MergeFrom(other.ExternalJoints);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasJoints) {
              Joints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(Joints);
            break;
          }
          case 18: {
            if (!HasCartesian) {
              Cartesian = new global::Abb.Egm.EgmPose();
            }
            input.ReadMessage(Cartesian);
            break;
          }
          case 26: {
            if (!HasExternalJoints) {
              ExternalJoints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(ExternalJoints);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmSpeedRef : pb::IMessage<EgmSpeedRef> {
    private static readonly pb::MessageParser<EgmSpeedRef> _parser = new pb::MessageParser<EgmSpeedRef>(() => new EgmSpeedRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmSpeedRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSpeedRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSpeedRef(EgmSpeedRef other) : this() {
      joints_ = other.HasJoints ? other.joints_.Clone() : null;
      cartesians_ = other.HasCartesians ? other.cartesians_.Clone() : null;
      externalJoints_ = other.HasExternalJoints ? other.externalJoints_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSpeedRef Clone() {
      return new EgmSpeedRef(this);
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 1;
    private global::Abb.Egm.EgmJoints joints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints Joints {
      get { return joints_; }
      set {
        joints_ = value;
      }
    }
    /// <summary>Gets whether the joints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoints {
      get { return joints_ != null; }
    }
    /// <summary>Clears the value of the joints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoints() {
      joints_ = null;
    }

    /// <summary>Field number for the "cartesians" field.</summary>
    public const int CartesiansFieldNumber = 2;
    private global::Abb.Egm.EgmCartesianSpeed cartesians_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmCartesianSpeed Cartesians {
      get { return cartesians_; }
      set {
        cartesians_ = value;
      }
    }
    /// <summary>Gets whether the cartesians field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCartesians {
      get { return cartesians_ != null; }
    }
    /// <summary>Clears the value of the cartesians field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCartesians() {
      cartesians_ = null;
    }

    /// <summary>Field number for the "externalJoints" field.</summary>
    public const int ExternalJointsFieldNumber = 3;
    private global::Abb.Egm.EgmJoints externalJoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints ExternalJoints {
      get { return externalJoints_; }
      set {
        externalJoints_ = value;
      }
    }
    /// <summary>Gets whether the externalJoints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExternalJoints {
      get { return externalJoints_ != null; }
    }
    /// <summary>Clears the value of the externalJoints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExternalJoints() {
      externalJoints_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmSpeedRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmSpeedRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Joints, other.Joints)) return false;
      if (!object.Equals(Cartesians, other.Cartesians)) return false;
      if (!object.Equals(ExternalJoints, other.ExternalJoints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJoints) hash ^= Joints.GetHashCode();
      if (HasCartesians) hash ^= Cartesians.GetHashCode();
      if (HasExternalJoints) hash ^= ExternalJoints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasJoints) {
        output.WriteRawTag(10);
        output.WriteMessage(Joints);
      }
      if (HasCartesians) {
        output.WriteRawTag(18);
        output.WriteMessage(Cartesians);
      }
      if (HasExternalJoints) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalJoints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joints);
      }
      if (HasCartesians) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cartesians);
      }
      if (HasExternalJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalJoints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmSpeedRef other) {
      if (other == null) {
        return;
      }
      if (other.HasJoints) {
        if (!HasJoints) {
          Joints = new global::Abb.Egm.EgmJoints();
        }
        Joints.MergeFrom(other.Joints);
      }
      if (other.HasCartesians) {
        if (!HasCartesians) {
          Cartesians = new global::Abb.Egm.EgmCartesianSpeed();
        }
        Cartesians.MergeFrom(other.Cartesians);
      }
      if (other.HasExternalJoints) {
        if (!HasExternalJoints) {
          ExternalJoints = new global::Abb.Egm.EgmJoints();
        }
        ExternalJoints.MergeFrom(other.ExternalJoints);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasJoints) {
              Joints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(Joints);
            break;
          }
          case 18: {
            if (!HasCartesians) {
              Cartesians = new global::Abb.Egm.EgmCartesianSpeed();
            }
            input.ReadMessage(Cartesians);
            break;
          }
          case 26: {
            if (!HasExternalJoints) {
              ExternalJoints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(ExternalJoints);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmPathCorr : pb::IMessage<EgmPathCorr> {
    private static readonly pb::MessageParser<EgmPathCorr> _parser = new pb::MessageParser<EgmPathCorr>(() => new EgmPathCorr());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmPathCorr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPathCorr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPathCorr(EgmPathCorr other) : this() {
      _hasBits0 = other._hasBits0;
      pos_ = other.HasPos ? other.pos_.Clone() : null;
      age_ = other.age_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmPathCorr Clone() {
      return new EgmPathCorr(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Abb.Egm.EgmCartesian pos_;
    /// <summary>
    /// Sensor measurement (x, y, z)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmCartesian Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }
    /// <summary>Gets whether the pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPos {
      get { return pos_ != null; }
    }
    /// <summary>Clears the value of the pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPos() {
      pos_ = null;
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private readonly static uint AgeDefaultValue = 0;

    private uint age_;
    /// <summary>
    /// Sensor measurement age in ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { if ((_hasBits0 & 1) != 0) { return age_; } else { return AgeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        age_ = value;
      }
    }
    /// <summary>Gets whether the "age" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAge {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "age" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAge() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmPathCorr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmPathCorr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Age != other.Age) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasAge) hash ^= Age.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPos) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (HasAge) {
        output.WriteRawTag(16);
        output.WriteUInt32(Age);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (HasAge) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmPathCorr other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        if (!HasPos) {
          Pos = new global::Abb.Egm.EgmCartesian();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.HasAge) {
        Age = other.Age;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasPos) {
              Pos = new global::Abb.Egm.EgmCartesian();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 16: {
            Age = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmFeedBack : pb::IMessage<EgmFeedBack> {
    private static readonly pb::MessageParser<EgmFeedBack> _parser = new pb::MessageParser<EgmFeedBack>(() => new EgmFeedBack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmFeedBack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmFeedBack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmFeedBack(EgmFeedBack other) : this() {
      joints_ = other.HasJoints ? other.joints_.Clone() : null;
      cartesian_ = other.HasCartesian ? other.cartesian_.Clone() : null;
      externalJoints_ = other.HasExternalJoints ? other.externalJoints_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmFeedBack Clone() {
      return new EgmFeedBack(this);
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 1;
    private global::Abb.Egm.EgmJoints joints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints Joints {
      get { return joints_; }
      set {
        joints_ = value;
      }
    }
    /// <summary>Gets whether the joints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoints {
      get { return joints_ != null; }
    }
    /// <summary>Clears the value of the joints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoints() {
      joints_ = null;
    }

    /// <summary>Field number for the "cartesian" field.</summary>
    public const int CartesianFieldNumber = 2;
    private global::Abb.Egm.EgmPose cartesian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmPose Cartesian {
      get { return cartesian_; }
      set {
        cartesian_ = value;
      }
    }
    /// <summary>Gets whether the cartesian field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCartesian {
      get { return cartesian_ != null; }
    }
    /// <summary>Clears the value of the cartesian field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCartesian() {
      cartesian_ = null;
    }

    /// <summary>Field number for the "externalJoints" field.</summary>
    public const int ExternalJointsFieldNumber = 3;
    private global::Abb.Egm.EgmJoints externalJoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmJoints ExternalJoints {
      get { return externalJoints_; }
      set {
        externalJoints_ = value;
      }
    }
    /// <summary>Gets whether the externalJoints field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExternalJoints {
      get { return externalJoints_ != null; }
    }
    /// <summary>Clears the value of the externalJoints field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExternalJoints() {
      externalJoints_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmFeedBack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmFeedBack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Joints, other.Joints)) return false;
      if (!object.Equals(Cartesian, other.Cartesian)) return false;
      if (!object.Equals(ExternalJoints, other.ExternalJoints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJoints) hash ^= Joints.GetHashCode();
      if (HasCartesian) hash ^= Cartesian.GetHashCode();
      if (HasExternalJoints) hash ^= ExternalJoints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasJoints) {
        output.WriteRawTag(10);
        output.WriteMessage(Joints);
      }
      if (HasCartesian) {
        output.WriteRawTag(18);
        output.WriteMessage(Cartesian);
      }
      if (HasExternalJoints) {
        output.WriteRawTag(26);
        output.WriteMessage(ExternalJoints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joints);
      }
      if (HasCartesian) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cartesian);
      }
      if (HasExternalJoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalJoints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmFeedBack other) {
      if (other == null) {
        return;
      }
      if (other.HasJoints) {
        if (!HasJoints) {
          Joints = new global::Abb.Egm.EgmJoints();
        }
        Joints.MergeFrom(other.Joints);
      }
      if (other.HasCartesian) {
        if (!HasCartesian) {
          Cartesian = new global::Abb.Egm.EgmPose();
        }
        Cartesian.MergeFrom(other.Cartesian);
      }
      if (other.HasExternalJoints) {
        if (!HasExternalJoints) {
          ExternalJoints = new global::Abb.Egm.EgmJoints();
        }
        ExternalJoints.MergeFrom(other.ExternalJoints);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasJoints) {
              Joints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(Joints);
            break;
          }
          case 18: {
            if (!HasCartesian) {
              Cartesian = new global::Abb.Egm.EgmPose();
            }
            input.ReadMessage(Cartesian);
            break;
          }
          case 26: {
            if (!HasExternalJoints) {
              ExternalJoints = new global::Abb.Egm.EgmJoints();
            }
            input.ReadMessage(ExternalJoints);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgmMotorState : pb::IMessage<EgmMotorState> {
    private static readonly pb::MessageParser<EgmMotorState> _parser = new pb::MessageParser<EgmMotorState>(() => new EgmMotorState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmMotorState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMotorState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMotorState(EgmMotorState other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMotorState Clone() {
      return new EgmMotorState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static global::Abb.Egm.EgmMotorState.Types.MotorStateType StateDefaultValue = global::Abb.Egm.EgmMotorState.Types.MotorStateType.MotorsUndefined;

    private global::Abb.Egm.EgmMotorState.Types.MotorStateType state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmMotorState.Types.MotorStateType State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmMotorState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmMotorState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmMotorState other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Abb.Egm.EgmMotorState.Types.MotorStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EgmMotorState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MotorStateType {
        [pbr::OriginalName("MOTORS_UNDEFINED")] MotorsUndefined = 0,
        [pbr::OriginalName("MOTORS_ON")] MotorsOn = 1,
        [pbr::OriginalName("MOTORS_OFF")] MotorsOff = 2,
      }

    }
    #endregion

  }

  public sealed partial class EgmMCIState : pb::IMessage<EgmMCIState> {
    private static readonly pb::MessageParser<EgmMCIState> _parser = new pb::MessageParser<EgmMCIState>(() => new EgmMCIState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmMCIState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMCIState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMCIState(EgmMCIState other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmMCIState Clone() {
      return new EgmMCIState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static global::Abb.Egm.EgmMCIState.Types.MCIStateType StateDefaultValue = global::Abb.Egm.EgmMCIState.Types.MCIStateType.MciUndefined;

    private global::Abb.Egm.EgmMCIState.Types.MCIStateType state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmMCIState.Types.MCIStateType State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmMCIState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmMCIState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmMCIState other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Abb.Egm.EgmMCIState.Types.MCIStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EgmMCIState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MCIStateType {
        [pbr::OriginalName("MCI_UNDEFINED")] MciUndefined = 0,
        [pbr::OriginalName("MCI_ERROR")] MciError = 1,
        [pbr::OriginalName("MCI_STOPPED")] MciStopped = 2,
        [pbr::OriginalName("MCI_RUNNING")] MciRunning = 3,
      }

    }
    #endregion

  }

  public sealed partial class EgmRapidCtrlExecState : pb::IMessage<EgmRapidCtrlExecState> {
    private static readonly pb::MessageParser<EgmRapidCtrlExecState> _parser = new pb::MessageParser<EgmRapidCtrlExecState>(() => new EgmRapidCtrlExecState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmRapidCtrlExecState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRapidCtrlExecState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRapidCtrlExecState(EgmRapidCtrlExecState other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRapidCtrlExecState Clone() {
      return new EgmRapidCtrlExecState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType StateDefaultValue = global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType.RapidUndefined;

    private global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmRapidCtrlExecState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmRapidCtrlExecState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmRapidCtrlExecState other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Abb.Egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EgmRapidCtrlExecState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RapidCtrlExecStateType {
        [pbr::OriginalName("RAPID_UNDEFINED")] RapidUndefined = 0,
        [pbr::OriginalName("RAPID_STOPPED")] RapidStopped = 1,
        [pbr::OriginalName("RAPID_RUNNING")] RapidRunning = 2,
      }

    }
    #endregion

  }

  public sealed partial class EgmTestSignals : pb::IMessage<EgmTestSignals> {
    private static readonly pb::MessageParser<EgmTestSignals> _parser = new pb::MessageParser<EgmTestSignals>(() => new EgmTestSignals());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmTestSignals> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmTestSignals() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmTestSignals(EgmTestSignals other) : this() {
      signals_ = other.signals_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmTestSignals Clone() {
      return new EgmTestSignals(this);
    }

    /// <summary>Field number for the "signals" field.</summary>
    public const int SignalsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_signals_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> signals_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Signals {
      get { return signals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmTestSignals);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmTestSignals other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!signals_.Equals(other.signals_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= signals_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      signals_.WriteTo(output, _repeated_signals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += signals_.CalculateSize(_repeated_signals_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmTestSignals other) {
      if (other == null) {
        return;
      }
      signals_.Add(other.signals_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            signals_.AddEntriesFrom(input, _repeated_signals_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Robot controller outbound message
  /// </summary>
  public sealed partial class EgmRobot : pb::IMessage<EgmRobot> {
    private static readonly pb::MessageParser<EgmRobot> _parser = new pb::MessageParser<EgmRobot>(() => new EgmRobot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRobot(EgmRobot other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.HasHeader ? other.header_.Clone() : null;
      feedBack_ = other.HasFeedBack ? other.feedBack_.Clone() : null;
      planned_ = other.HasPlanned ? other.planned_.Clone() : null;
      motorState_ = other.HasMotorState ? other.motorState_.Clone() : null;
      mciState_ = other.HasMciState ? other.mciState_.Clone() : null;
      mciConvergenceMet_ = other.mciConvergenceMet_;
      testSignals_ = other.HasTestSignals ? other.testSignals_.Clone() : null;
      rapidExecState_ = other.HasRapidExecState ? other.rapidExecState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmRobot Clone() {
      return new EgmRobot(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Abb.Egm.EgmHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }
    /// <summary>Gets whether the header field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeader {
      get { return header_ != null; }
    }
    /// <summary>Clears the value of the header field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeader() {
      header_ = null;
    }

    /// <summary>Field number for the "feedBack" field.</summary>
    public const int FeedBackFieldNumber = 2;
    private global::Abb.Egm.EgmFeedBack feedBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmFeedBack FeedBack {
      get { return feedBack_; }
      set {
        feedBack_ = value;
      }
    }
    /// <summary>Gets whether the feedBack field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedBack {
      get { return feedBack_ != null; }
    }
    /// <summary>Clears the value of the feedBack field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedBack() {
      feedBack_ = null;
    }

    /// <summary>Field number for the "planned" field.</summary>
    public const int PlannedFieldNumber = 3;
    private global::Abb.Egm.EgmPlanned planned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmPlanned Planned {
      get { return planned_; }
      set {
        planned_ = value;
      }
    }
    /// <summary>Gets whether the planned field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanned {
      get { return planned_ != null; }
    }
    /// <summary>Clears the value of the planned field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanned() {
      planned_ = null;
    }

    /// <summary>Field number for the "motorState" field.</summary>
    public const int MotorStateFieldNumber = 4;
    private global::Abb.Egm.EgmMotorState motorState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmMotorState MotorState {
      get { return motorState_; }
      set {
        motorState_ = value;
      }
    }
    /// <summary>Gets whether the motorState field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMotorState {
      get { return motorState_ != null; }
    }
    /// <summary>Clears the value of the motorState field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMotorState() {
      motorState_ = null;
    }

    /// <summary>Field number for the "mciState" field.</summary>
    public const int MciStateFieldNumber = 5;
    private global::Abb.Egm.EgmMCIState mciState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmMCIState MciState {
      get { return mciState_; }
      set {
        mciState_ = value;
      }
    }
    /// <summary>Gets whether the mciState field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMciState {
      get { return mciState_ != null; }
    }
    /// <summary>Clears the value of the mciState field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMciState() {
      mciState_ = null;
    }

    /// <summary>Field number for the "mciConvergenceMet" field.</summary>
    public const int MciConvergenceMetFieldNumber = 6;
    private readonly static bool MciConvergenceMetDefaultValue = false;

    private bool mciConvergenceMet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MciConvergenceMet {
      get { if ((_hasBits0 & 1) != 0) { return mciConvergenceMet_; } else { return MciConvergenceMetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mciConvergenceMet_ = value;
      }
    }
    /// <summary>Gets whether the "mciConvergenceMet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMciConvergenceMet {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mciConvergenceMet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMciConvergenceMet() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "testSignals" field.</summary>
    public const int TestSignalsFieldNumber = 7;
    private global::Abb.Egm.EgmTestSignals testSignals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmTestSignals TestSignals {
      get { return testSignals_; }
      set {
        testSignals_ = value;
      }
    }
    /// <summary>Gets whether the testSignals field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestSignals {
      get { return testSignals_ != null; }
    }
    /// <summary>Clears the value of the testSignals field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestSignals() {
      testSignals_ = null;
    }

    /// <summary>Field number for the "rapidExecState" field.</summary>
    public const int RapidExecStateFieldNumber = 8;
    private global::Abb.Egm.EgmRapidCtrlExecState rapidExecState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmRapidCtrlExecState RapidExecState {
      get { return rapidExecState_; }
      set {
        rapidExecState_ = value;
      }
    }
    /// <summary>Gets whether the rapidExecState field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRapidExecState {
      get { return rapidExecState_ != null; }
    }
    /// <summary>Clears the value of the rapidExecState field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRapidExecState() {
      rapidExecState_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(FeedBack, other.FeedBack)) return false;
      if (!object.Equals(Planned, other.Planned)) return false;
      if (!object.Equals(MotorState, other.MotorState)) return false;
      if (!object.Equals(MciState, other.MciState)) return false;
      if (MciConvergenceMet != other.MciConvergenceMet) return false;
      if (!object.Equals(TestSignals, other.TestSignals)) return false;
      if (!object.Equals(RapidExecState, other.RapidExecState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeader) hash ^= Header.GetHashCode();
      if (HasFeedBack) hash ^= FeedBack.GetHashCode();
      if (HasPlanned) hash ^= Planned.GetHashCode();
      if (HasMotorState) hash ^= MotorState.GetHashCode();
      if (HasMciState) hash ^= MciState.GetHashCode();
      if (HasMciConvergenceMet) hash ^= MciConvergenceMet.GetHashCode();
      if (HasTestSignals) hash ^= TestSignals.GetHashCode();
      if (HasRapidExecState) hash ^= RapidExecState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasFeedBack) {
        output.WriteRawTag(18);
        output.WriteMessage(FeedBack);
      }
      if (HasPlanned) {
        output.WriteRawTag(26);
        output.WriteMessage(Planned);
      }
      if (HasMotorState) {
        output.WriteRawTag(34);
        output.WriteMessage(MotorState);
      }
      if (HasMciState) {
        output.WriteRawTag(42);
        output.WriteMessage(MciState);
      }
      if (HasMciConvergenceMet) {
        output.WriteRawTag(48);
        output.WriteBool(MciConvergenceMet);
      }
      if (HasTestSignals) {
        output.WriteRawTag(58);
        output.WriteMessage(TestSignals);
      }
      if (HasRapidExecState) {
        output.WriteRawTag(66);
        output.WriteMessage(RapidExecState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeader) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasFeedBack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeedBack);
      }
      if (HasPlanned) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Planned);
      }
      if (HasMotorState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotorState);
      }
      if (HasMciState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MciState);
      }
      if (HasMciConvergenceMet) {
        size += 1 + 1;
      }
      if (HasTestSignals) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestSignals);
      }
      if (HasRapidExecState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RapidExecState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmRobot other) {
      if (other == null) {
        return;
      }
      if (other.HasHeader) {
        if (!HasHeader) {
          Header = new global::Abb.Egm.EgmHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasFeedBack) {
        if (!HasFeedBack) {
          FeedBack = new global::Abb.Egm.EgmFeedBack();
        }
        FeedBack.MergeFrom(other.FeedBack);
      }
      if (other.HasPlanned) {
        if (!HasPlanned) {
          Planned = new global::Abb.Egm.EgmPlanned();
        }
        Planned.MergeFrom(other.Planned);
      }
      if (other.HasMotorState) {
        if (!HasMotorState) {
          MotorState = new global::Abb.Egm.EgmMotorState();
        }
        MotorState.MergeFrom(other.MotorState);
      }
      if (other.HasMciState) {
        if (!HasMciState) {
          MciState = new global::Abb.Egm.EgmMCIState();
        }
        MciState.MergeFrom(other.MciState);
      }
      if (other.HasMciConvergenceMet) {
        MciConvergenceMet = other.MciConvergenceMet;
      }
      if (other.HasTestSignals) {
        if (!HasTestSignals) {
          TestSignals = new global::Abb.Egm.EgmTestSignals();
        }
        TestSignals.MergeFrom(other.TestSignals);
      }
      if (other.HasRapidExecState) {
        if (!HasRapidExecState) {
          RapidExecState = new global::Abb.Egm.EgmRapidCtrlExecState();
        }
        RapidExecState.MergeFrom(other.RapidExecState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasHeader) {
              Header = new global::Abb.Egm.EgmHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (!HasFeedBack) {
              FeedBack = new global::Abb.Egm.EgmFeedBack();
            }
            input.ReadMessage(FeedBack);
            break;
          }
          case 26: {
            if (!HasPlanned) {
              Planned = new global::Abb.Egm.EgmPlanned();
            }
            input.ReadMessage(Planned);
            break;
          }
          case 34: {
            if (!HasMotorState) {
              MotorState = new global::Abb.Egm.EgmMotorState();
            }
            input.ReadMessage(MotorState);
            break;
          }
          case 42: {
            if (!HasMciState) {
              MciState = new global::Abb.Egm.EgmMCIState();
            }
            input.ReadMessage(MciState);
            break;
          }
          case 48: {
            MciConvergenceMet = input.ReadBool();
            break;
          }
          case 58: {
            if (!HasTestSignals) {
              TestSignals = new global::Abb.Egm.EgmTestSignals();
            }
            input.ReadMessage(TestSignals);
            break;
          }
          case 66: {
            if (!HasRapidExecState) {
              RapidExecState = new global::Abb.Egm.EgmRapidCtrlExecState();
            }
            input.ReadMessage(RapidExecState);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Robot controller inbound message, sent from sensor
  /// </summary>
  public sealed partial class EgmSensor : pb::IMessage<EgmSensor> {
    private static readonly pb::MessageParser<EgmSensor> _parser = new pb::MessageParser<EgmSensor>(() => new EgmSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensor(EgmSensor other) : this() {
      header_ = other.HasHeader ? other.header_.Clone() : null;
      planned_ = other.HasPlanned ? other.planned_.Clone() : null;
      speedRef_ = other.HasSpeedRef ? other.speedRef_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensor Clone() {
      return new EgmSensor(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Abb.Egm.EgmHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }
    /// <summary>Gets whether the header field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeader {
      get { return header_ != null; }
    }
    /// <summary>Clears the value of the header field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeader() {
      header_ = null;
    }

    /// <summary>Field number for the "planned" field.</summary>
    public const int PlannedFieldNumber = 2;
    private global::Abb.Egm.EgmPlanned planned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmPlanned Planned {
      get { return planned_; }
      set {
        planned_ = value;
      }
    }
    /// <summary>Gets whether the planned field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanned {
      get { return planned_ != null; }
    }
    /// <summary>Clears the value of the planned field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanned() {
      planned_ = null;
    }

    /// <summary>Field number for the "speedRef" field.</summary>
    public const int SpeedRefFieldNumber = 3;
    private global::Abb.Egm.EgmSpeedRef speedRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmSpeedRef SpeedRef {
      get { return speedRef_; }
      set {
        speedRef_ = value;
      }
    }
    /// <summary>Gets whether the speedRef field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeedRef {
      get { return speedRef_ != null; }
    }
    /// <summary>Clears the value of the speedRef field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeedRef() {
      speedRef_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Planned, other.Planned)) return false;
      if (!object.Equals(SpeedRef, other.SpeedRef)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeader) hash ^= Header.GetHashCode();
      if (HasPlanned) hash ^= Planned.GetHashCode();
      if (HasSpeedRef) hash ^= SpeedRef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPlanned) {
        output.WriteRawTag(18);
        output.WriteMessage(Planned);
      }
      if (HasSpeedRef) {
        output.WriteRawTag(26);
        output.WriteMessage(SpeedRef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeader) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPlanned) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Planned);
      }
      if (HasSpeedRef) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedRef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmSensor other) {
      if (other == null) {
        return;
      }
      if (other.HasHeader) {
        if (!HasHeader) {
          Header = new global::Abb.Egm.EgmHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPlanned) {
        if (!HasPlanned) {
          Planned = new global::Abb.Egm.EgmPlanned();
        }
        Planned.MergeFrom(other.Planned);
      }
      if (other.HasSpeedRef) {
        if (!HasSpeedRef) {
          SpeedRef = new global::Abb.Egm.EgmSpeedRef();
        }
        SpeedRef.MergeFrom(other.SpeedRef);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasHeader) {
              Header = new global::Abb.Egm.EgmHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (!HasPlanned) {
              Planned = new global::Abb.Egm.EgmPlanned();
            }
            input.ReadMessage(Planned);
            break;
          }
          case 26: {
            if (!HasSpeedRef) {
              SpeedRef = new global::Abb.Egm.EgmSpeedRef();
            }
            input.ReadMessage(SpeedRef);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Robot controller inbound message, sent from sensor
  /// </summary>
  public sealed partial class EgmSensorPathCorr : pb::IMessage<EgmSensorPathCorr> {
    private static readonly pb::MessageParser<EgmSensorPathCorr> _parser = new pb::MessageParser<EgmSensorPathCorr>(() => new EgmSensorPathCorr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgmSensorPathCorr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Abb.Egm.EgmReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensorPathCorr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensorPathCorr(EgmSensorPathCorr other) : this() {
      header_ = other.HasHeader ? other.header_.Clone() : null;
      pathCorr_ = other.HasPathCorr ? other.pathCorr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgmSensorPathCorr Clone() {
      return new EgmSensorPathCorr(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Abb.Egm.EgmHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }
    /// <summary>Gets whether the header field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeader {
      get { return header_ != null; }
    }
    /// <summary>Clears the value of the header field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeader() {
      header_ = null;
    }

    /// <summary>Field number for the "pathCorr" field.</summary>
    public const int PathCorrFieldNumber = 2;
    private global::Abb.Egm.EgmPathCorr pathCorr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Abb.Egm.EgmPathCorr PathCorr {
      get { return pathCorr_; }
      set {
        pathCorr_ = value;
      }
    }
    /// <summary>Gets whether the pathCorr field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPathCorr {
      get { return pathCorr_ != null; }
    }
    /// <summary>Clears the value of the pathCorr field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPathCorr() {
      pathCorr_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgmSensorPathCorr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgmSensorPathCorr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(PathCorr, other.PathCorr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeader) hash ^= Header.GetHashCode();
      if (HasPathCorr) hash ^= PathCorr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (HasPathCorr) {
        output.WriteRawTag(18);
        output.WriteMessage(PathCorr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHeader) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (HasPathCorr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathCorr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgmSensorPathCorr other) {
      if (other == null) {
        return;
      }
      if (other.HasHeader) {
        if (!HasHeader) {
          Header = new global::Abb.Egm.EgmHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.HasPathCorr) {
        if (!HasPathCorr) {
          PathCorr = new global::Abb.Egm.EgmPathCorr();
        }
        PathCorr.MergeFrom(other.PathCorr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasHeader) {
              Header = new global::Abb.Egm.EgmHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (!HasPathCorr) {
              PathCorr = new global::Abb.Egm.EgmPathCorr();
            }
            input.ReadMessage(PathCorr);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
